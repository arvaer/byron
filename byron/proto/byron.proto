syntax = "proto3";

package byron;

import "google/protobuf/empty.proto";

// Put Command
// DSL: p [INT1] [INT2]
// Inserts (or updates) a key-value pair.
message PutRequest {
  int64 key = 1;
  int64 value = 2;
}

message PutResponse {
  // No output is expected on a put.
}

// Get Command
// DSL: g [INT1]
// Retrieves the value for a given key. If the key is not present, 'found' is false.
message GetRequest {
  int64 key = 1;
}

message GetResponse {
  int64 key = 1;
  int64 value = 2; // valid only when found is true
}

// Range Command
// DSL: r [INT1] [INT2]
// Returns all key-value pairs with keys in the half-open range [start, end).
message RangeRequest {
  int64 start = 1;  // inclusive start key
  int64 end = 2;    // exclusive end key
}

message KeyValue {
  int64 key = 1;
  int64 value = 2;
}

message RangeResponse {
  repeated KeyValue pairs = 1;
}

// Delete Command
// DSL: d [INT1]
// Removes a key-value pair from the tree.
message DeleteRequest {
  int64 key = 1;
}

message DeleteResponse {
  // No output is expected for delete.
}

// Load Command
// DSL: l "path/to/file"
// Loads a binary file containing key-value pairs into the tree.
message LoadRequest {
  string file_path = 1;
}

message LoadResponse {
  // Optionally, return the number of pairs loaded.
  int64 pairs_loaded = 1;
}

// Print Stats Command
// DSL: s
// Returns statistics including the number of logical pairs,
// counts per tree level, and a dump of entries in the format "key:value:level".
message StatsResponse {
  int64 logical_pairs = 1;
  // A mapping from level name (e.g., "LVL1") to the count of keys at that level.
  map<string, int64> level_counts = 2;
  // Each entry is represented as a string in the "key:value:level" format.
  repeated string dump = 3;
}

// LSMTreeService defines an RPC service for the DSL commands.
service byron {
  rpc Put(PutRequest) returns (PutResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Range(RangeRequest) returns (RangeResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc Load(LoadRequest) returns (LoadResponse);
  //rpc PrintStats(google.protobuf.Empty) returns (StatsResponse);
}

